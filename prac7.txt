1] Write a shell script to print n natural numbers using while loop.

Code: vi 22
echo "Enter a number :"
read n
i=1
echo "The first $n natural numbers :"
while [ $i -le $n ]
do
echo $i
i=$[ $i + 1 ]
done


2] Write a shell script to read sum of first n natural numbers using 'until' loop
Code: vi 23
echo "Enter a number :"
read n
i=1
sum=0
until [ $i -gt $n ]
do
sum=$[ $sum+$i]
i=$[ $i+1 ]
done
echo "The sum of $n natural numbers : $sum"


3] Write a shell script to print the sum of first n natural numbers using c type for loop.

Code: vi 24
echo "Enter a number :"
read n
i=1
sumsq=0
for ((i=1;i<=n;i++))
do
sumsq=$[ $sumsq + $i * $i ]
done
echo "The sum of square $n natural numbers : $sumsq"


4] Write a shell script to read positive number from the user and print multiplication of that number.

Code: vi 25
while [ true ]
do
echo "Enter a number :"
read num
if [ $num -le 0 ]
then
echo "Please enter positive number :"
else
i=1
while [ $i -le 10 ]
do
mul=$[ $i * $num ]
echo "$num * $i=$mul"
i=$[ $i +1 ]
done
break
fi
done

5] Write a shell script to print even or odd series up to n using while loop.

Code: vi 26
echo "Enter a number"
read n
x=1
echo "The even numbers upto $n are : "
while [ $x -le $n ]
do
if(( $x%2==0 ))
then
echo $x
fi
x=$[$x+1]
done
x=1
echo "The odd numbers upto $n are : "
while [ $x -le $n ]
do
if(( $x%2!=0 ))
then
echo $x
fi
x=$[$x+1]



6] Write a shell script to generate Fibonacci series upto n.

Code: vi 27
echo "Enter any value :"
read n
i=1
f1=0
f2=1
echo "$f1"
echo "$f2"
while [ $i -le $n ]
do
f3=`expr $f1 + $f2`
echo "$f3"
i=$[ $i + 1 ]
f1=$f2
f2=$f3
done


7] Write a shell script to generate following series using while loop, series is 1, 3 ,2, 4, 3......100

Code: vi 28
i=1
j=3
while [ $i -le 100 ]
do
echo $i
echo $j
i=$[ $i + 1 ]
j=$[ $j + 1 ]
done


8] Write a shell script to read positive number from the command line argument and find its factorial.

Code: vi 29
echo "Enter a number :"
read num
if [ $num -lt 0 ]
then
echo "Please enter positive number."
else
fact=1
for ((i=1;i<=num;i++))
do
fact=$[ $fact * $i ]
done 
echo "Factorial of $num is : $fact"
fi


9] Write a shell script that asks the user to input the number and display the table of factorial from 1 to n.

Code: vi 30
echo "Enter any number :"
read num
fact=1
if [ $num -lt 0 ]
then
echo "Please enter positive number."
else
for(( i=1;i<=num;i++ ))
do
for(( j=1;j<=$i;j++ ))
do
fact=$[ $fact * $j ]
done
echo "$i!= $fact"
fact=1
done
fi


10] Write a shell script to read a number from the user and check whether it is prime number or not.

Code: vi 31
i=2
flag=0
while [ $i -lt $1 ]
do
if [ `expr $1 % $i` -eq 0 ]
then
flag=1
fi
i=$[ $i + 1 ]
done
if [ $flag -eq 0 ]
then
echo "$1 is a prime number."
else
echo "$1 is not a prime number."
fi

11] Write a shell script to read a number from the user and print prime number series up to that number.

Code: vi 32
flag=0
echo "Enter number: "
read no
echo "Series of prime numbers upto $no: "
for((i=2;i<=no;i++))
do
for((j=2;j<i;j++))
do
if [ `expr $i % $j ` -eq 0 ]
then
flag=1
fi
done
if [ $flag -eq 0 ]
then
echo $i
fi
flag=0
done


12] Write a shell script to find power of n^y where n and y should be taken from command line.

Code: vi 33
pow=1
echo "Enter number(m): "
read m
echo "Enter power(n): "
read n
for((i=1;i<=n;i++))
do
pow=`expr $pow \* $m `
done
echo "$m^$n = $pow"

13] Write a shell script to find G.C.D. and L.C.M. of 2 positive numbers.

Code: vi 34
echo "Enter first number :"
read n
echo "Enter second number :"
read m
for (( i=1;i<=n;i++ ))
do
if [ `expr $n % $i` -eq 0 ]
then
if [ `expr $m % $i` -eq 0 ]
then
gcd=$i
fi
fi
done
echo "G.C.D. :$gcd"
lcm=`expr $n \* $m`
lcm1=`expr $lcm / $gcd`
echo "L.C.M. is $lcm1"

14] Write a shell script to display list of all files and directories in current working directory separately.

Code: vi 41
f=0
s=0
d=0
for i in *
do
if [-f $i]
then
f=$[$f+1]
elif [-d $i]
then
d=$[$d+1]
else
s=$[$s+1]
fi
done
echo "The number of directory $d"
echo "The number of files :$f"
echo "The number of special files :$s"


15] Write a shell script which checks every minute how many users currently logged in.

Code: vi 42
while [ true ]
do
x=`who|wc -l`
echo "Number of users currently logged in :$x"
sleep 60
done


16] Write a shell script to create a file which stores name of file. Against each name put morning, evening or afternoon depending upon time at which file is created.

Code: vi 44
for i in *
do
if [ -f $i ]
then
x=`ls -l $i | cut -c 45-47`
echo "$x"
if [ $x -ge 6 -a $x -lt 12 ]
then
echo "$i: morning" >>b1
elif [ $x -ge 12 -a $x -lt 16 ]
then
echo "$i: afternoon" >>b1
elif [ $x -ge 16 -a $x -lt 20 ]
then
echo "$i: evening" >>b1
else
echo "$i: goodnight" >>b1
fi
cat b1
else
echo "File does not exist"
fi
done


17] Write a shell script to accept a username. If user is not present then appropriate
message should be displayed otherwise tell the user to logout, wait for 5 seconds and kill his job.

Code: vi 45
echo "Enter username:"
read u
x=`who|grep -c "$u"`
if [ $x -eq 0 ]
then
echo "$u user not present."
else
echo "$u user present....please save your work....system will shut down in some
time"
sleep 5
shut down -h 0
fi

18] Write a shell script to accept file name from user, store the names in new file if length of name is less than 10.

Code: vi 46
count=1
while [ $count -le 5 ]
do
echo "Enter name $count"
read name
len=${#name}
if [ $len -lt 10 ]
then
echo "$name">>demo
fi
count=$[ $count+1 ]
done
echo "The name whose length is less than 10 are :"
cat demo


19] Write a shell script to pick up a shell script file and convert first 10 lines from lower to uppercase.

Code: vi 48
echo "Enter file name :"
read f
for f in *.c
do
if [ -f$f ]
then
echo "The original content of $f file :"
cat $f
echo "The translated first 2 lines of $f file :"
head -2 $f|tr '[a-z]' '[A-Z]'
else
echo "$f is not a file"
fi
done
Output:
[tybscit@localhost Desktop]$ sh 48
Enter file name :
471.c
The original content of 471.c file :
echo "Enter c program file"
read f1
if [ -f$f1 ]
then
echo "$f1 exist"
echo "Compiling and executing $f1 file"
cc -o a1.out $f1
echo "The output of $f1 file is "
./a1.out
else
echo "$f1 file does not exist."
fi
The translated first 2 lines of 471.c file :
ECHO "ENTER C PROGRAM FILE"
READ F1
The original content of 47.c file :
#include<stdio.h>
main()
{
printf("Hello World !!\n");
}
The translated first 2 lines of 47.c file :
#INCLUDE<STDIO.H>
MAIN()

20] Write a shell script to accept 5 student marks, name and roll number. Store these details in pass or fail file depending on their marks.

Code: vi 49
count=1
while [ $count -lt 5 ]
do
echo "Enter roll number,name and marks $count:"
read rlno
read nm
read mks
if [ $mks -lt 35 ]
then
echo "$rlno~$nm~$mks">>fail
else
echo "$rlno~$nm~$mks">>pass
fi
count=$[ $count+1 ]
done
echo "Students who have passed:"
cat pass
echo "Students who have failed :"
cat fail;


21] Write a shell script to accept 2 file names from user. Translate all characters of a first file from lower to uppercase and store it in second file.

Code: vi 50
echo "Enter file 1 name"
read f1
if [ -f$f1 ]
then
echo "The $f1 exists."
echo "The contents of $f1 are :"
cat $f1
while [ true ]
do
echo "Enter file 2 name"
read f2
if [ -f$f2 ]
then
echo "$f2 exist......Please enter other name"
echo "The translated content of $f1"
tr '[a-z]' '[A-Z]' <$f1 >$f2
cat $f2
break
fi
done
break
else
